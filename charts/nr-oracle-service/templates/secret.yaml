# retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
{{- $secretName := printf "%s" (include "component.name" .) }}
{{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName) | default dict }}
{{- $secretData := (get $secretObj "data") | default dict }}
# set below to existing secret data or generate a random one when not exists
{{- $certSecret := (get $secretData "certSecret") | default (randAlpha 10 | lower | b64enc)  }}
{{- $apiKey := (get $secretData "apiKey") | default (randAlphaNum 32 | b64enc) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "component.name" . }}
  labels: {{- include "component.selectorLabels" . | nindent 4 }}
data:
  dbUser: {{ .Values.app.envs.DB_USER | b64enc | quote }}
  dbPassword: {{ .Values.app.envs.DB_PASSWORD | b64enc | quote }}
  dbHost: {{ .Values.app.envs.DB_HOST | b64enc | quote }}
  dbPort: {{ .Values.app.envs.DB_PORT | b64enc | quote }}
  dbName: {{ .Values.app.envs.DB_NAME | b64enc | quote }}
  certSecret: {{ $certSecret | quote }} # cert secret is reused.
  apiKey: {{ $apiKey | quote }}
