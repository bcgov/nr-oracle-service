# retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
{{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "nr-oracle-service.name") | default dict }}
{{- $secretData := (get $secretObj "stringData") | default dict }}
# set $certSecret to existing secret data or generate a random one when not exists
{{- $certSecret := (get $secretData "cert-secret") | default (randAlphaNum 8) }}
{{- $apiKey := (randAlphaNum 32) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "nr-oracle-service.name" . }}
  labels: {{- include "nr-oracle-service.selectorLabels" . | nindent 4 }}
stringData:
  db-user: {{ .Values.app.envs.DB_USER | quote }}
  db-password: {{ .Values.app.envs.DB_PASSWORD | quote }}
  db-host: {{ .Values.app.envs.DB_HOST | quote }}
  db-name: {{ .Values.app.envs.DB_NAME | quote }}
  cert-secret: {{ $certSecret | quote }} # cert secret is reused.
  api-key: {{ default $apiKey | quote }}
